<?php

namespace Fnx\FinanceiroBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * MovimentacaoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MovimentacaoRepository extends EntityRepository
{
    public function loadParcela($id){
        
        return $this->getEntityManager()
                ->createQuery('SELECT a,r,p,m,fp
                               FROM FnxAdminBundle:Atividade a
                               JOIN a.registro r
                               JOIN r.parcelas p
                               JOIN p.movimentacao m
                               JOIN m.formaPagamento fp
                               WHERE a.id = :id')
                ->setParameter("id", $id)
                ->getArrayResult();
    }
    
    public function getMovimentacoes($inicio, $fim, $tipo, $conta){
        
        
        $inicio = new \DateTime($this->conv_data_to_us($inicio));
        $fim = new \DateTime($this->conv_data_to_us($fim));
        $fim->add(new \DateInterval("P1D"));
        switch ($tipo){
            case "ativas":
                $param = false;
                break;
            case "finalizadas":
                $param = true;
                break;
            case "todas":
                $param = "";
        }
 
        return $this->getEntityManager()
                ->createQuery('SELECT m,p,r,fp
                               FROM FnxFinanceiroBundle:Movimentacao m
                               JOIN m.parcela p
                               JOIN p.registro r
                               JOIN r.conta c
                               JOIN m.formaPagamento fp
                               WHERE m.data_pagamento > :inicio AND 
                               m.data_pagamento < :fim AND 
                               p.finalizado = :param AND 
                               c.id = :conta')
                ->setParameters(array("inicio" => $inicio,
                                      "fim" => $fim,
                                      "param" => $param,
                                      "conta" => $conta))
                ->getArrayResult();
        
    }
    
    public function getMovimentacoesGerais($inicio, $fim, $tipo, $data, $conta, $categoria, $doc){
        
        $inicio = new \DateTime($this->conv_data_to_us($inicio));
        $inicio->format("Y-m-d");
        $fim = new \DateTime($this->conv_data_to_us($fim));
        $fim->format("Y-m-d");
        $fim->add(new \DateInterval("P1D"));

        
        $qb = $this->createQueryBuilder('m')
              ->select('m','p','r','fp')
              ->innerJoin('m.parcela', 'p')
              ->innerJoin('p.registro', 'r')
              ->innerJoin('r.conta', 'c')
              ->innerJoin('m.formaPagamento', 'fp');
        
        
        switch ($data){
            case "r":
                $qb->where('m.data > :inicio AND m.data < :fim');
                break;
            case "p":
                $qb->where('m.data_pagamento > :inicio AND m.data_pagamento < :fim');
                break;
            case "v":
                $qb->where('p.dt_vencimento > :inicio AND p.dt_vencimento < :fim');
                break;
        }
        
        if ($categoria != 0){
            $qb->andWhere("r.categoria = :categoria")
            ->setParameter("categoria", $categoria);
        }
        
        if ($doc != 0){
            $qb->andWhere("r.id = :doc")
            ->setParameter("doc", $doc);
        }
        
        $dayAgo = new \DateTime("-1 day");
        $dayAgo->setTime(0, 0, 0);
        //var_dump($dayAgo);
        switch ($tipo){
            case "atraso":
                $qb->andWhere('p.dt_vencimento <= :param');
                $qb->andWhere('p.finalizado = :false');
                
                $qb->setParameter("false", false);
                $qb->setParameter("param", $dayAgo);
                break;
            case "aberto":
                $qb->andWhere('p.finalizado = :false');
                $qb->andWhere('p.dt_vencimento > :param');
                
                $qb->setParameter("param", $dayAgo);
                $qb->setParameter("false", false);
                break;
            case "quitada":
                $qb->andWhere('p.finalizado = :true');
                $qb->setParameter("true", true);
                break;
        }
        
        $qb->andWhere('c.id = :conta');
        $qb->andWhere('r.ativo = :true');
        $qb->setParameters(array("inicio" => $inicio,
                                 "fim" => $fim,
                                 "conta" => $conta,
                                 "true" => true));
        
        //var_dump($qb->getDQL());
        return $qb->getQuery()->getArrayResult();
        
    }
    
    public static function conv_data_to_us($date){
	$dia = substr($date,0,2);
	$mes = substr($date,3,2);
	$ano = substr($date,6,4);
	return "{$ano}-{$mes}-{$dia}";
     }
}